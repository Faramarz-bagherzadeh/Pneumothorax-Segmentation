import numpy as np
import matplotlib.pyplot as plt
import keras
import cv2
import tensorflow as tf
import pandas as pd
import math
import random
import pydicom
import glob

files= glob.glob('\\pneumothorax segmentation\\Unet\\dataset\\archive\\dicom-images-train\\**\\**\\*.dcm')

len(files)

def rle2mask(rle, width, height):
    """
    RLE to mask conversion provided by competetion organizers with the dataset.
    """
    mask= np.zeros(width* height)
    array = np.asarray([int(x) for x in rle.split()])
    starts = array[0::2]
    lengths = array[1::2]

    current_position = 0
    for index, start in enumerate(starts):
        current_position += start
        mask[current_position:current_position+lengths[index]] = 255
        current_position += lengths[index]

    return mask.reshape(width, height)
 
 #reading CSV file 
df=pd.read_csv('\\pneumothorax segmentation\\Unet\\dataset\\archive\\train-rle.csv')
df.head(3)


#finding proper mask from CSV file considering ID of patient 
i=0
j=0
k=0
for file in files:
    try:
        print(i)
        i+=1
        _splited=file.split('\\')[-1]
        ID=_splited[:-4]
        encoded_pixel=df.loc[lambda df: df["ImageId"]==ID][' EncodedPixels']
        img=pydicom.dcmread(file)
        img=img.pixel_array

        # check if patient has Pneumothorax
        if encoded_pixel.values[0]==' -1':
            print ("Pneumothorax Negative")
            #saving image and empty mask
            # we have differetn portion of negative and positive in data set, and we try to make it equal in test dataset
            #spliting test and train by %10 from negative ID
            j+=1
            if j%10==0:
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\test\\image\\{}.jpg'.format(ID),
                            img)
            
                cv2.imwrite('E:\\My papers\\pneumothorax segmentation\\Unet\\organized_dataset\\test\\mask\\{}.jpg'.format(ID),
                            np.zeros((1024,1024)))
            else:
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\train\\image\\{}.jpg'.format(ID),
                            img)
            
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\train\\mask\\{}.jpg'.format(ID),
                            np.zeros((1024,1024)))

        else:
            print("Pneumothorax Positive")
            #generating mask
            mask=rle2mask(encoded_pixel.values[0], 1024, 1024)
                
            #Checking multi mask objetcs
            if len(encoded_pixel.values)>1:
                for m in range(len(encoded_pixel.values)-1):
                    mask=rle2mask(encoded_pixel.values[m+1], 1024, 1024)+mask
                print ("Multi Mask Image********************", ID)
            
            k+=1
  
            #spliting test and train by %15 from positive ID
            if k%7==0:
                cv2.imwrite('\pneumothorax segmentation\\Unet\\organized_dataset\\test\\image\\{}.jpg'.format(ID),
                           img)
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\test\\mask\\{}.jpg'.format(ID),
                           mask)
            else:
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\train\\image\\copy{}.jpg'.format(ID),
                           img)
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\train\\mask\\copy{}.jpg'.format(ID),
                           mask)
                cv2.imwrite('\\pneumothorax segmentation\\Unet\\organized_dataset\\train\\image\\{}.jpg'.format(ID),
                           img)
                cv2.imwrite('\pneumothorax segmentation\\Unet\\organized_dataset\\train\\mask\\{}.jpg'.format(ID),
                           mask)   
                
    except:
        pass
